{"version":3,"sources":["/lib/comment.js"],"names":["Session","constructor","context","client_id","client_secret","scope","resp","token","undefined","userinfo","a","window","localStorage","getItem","JSON","parse","location","href","split","c","length","forEach","key","b","code","e","getLoginInfo","isLogin","Comment","_session","session","get","url","data","request","fetch","method","headers","Accept","Authorization","body","stringify","post","getLoginURL","redirect_uri","ops","Object","assign","paras","Reflect","ownKeys","map","join","login","dataType","then","info","access_token","setItem","Promise","resolve","getIssueCommentsById","id","Date","getTime","getMarkdownContent","content","comment"],"mappings":"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","sourcesContent":["class Session {\n    constructor(context) {\n        this.context = context;\n        this.client_id = \"4b5042acc1e0f611dcbb\";\n        this.client_secret = \"4e8d2f4341b5a5e29e7b4b4b04d8b2ab03e837b8\";\n        this.scope = \"public_repo\";\n        this.resp = \"topolr/ada\";\n        this.token = undefined;\n        this.userinfo = undefined;\n        try {\n            let a = context.window.localStorage.getItem(\"gitoken\");\n            this.token = !a || a === \"undefined\" ? undefined : a;\n            a = context.window.localStorage.getItem(\"gituser\");\n            if (a) {\n                this.userinfo = JSON.parse(a);\n            } else {\n                this.userinfo = undefined;\n            }\n            a = context.window.location.href.split(\"?\");\n            let c = {};\n            if (a.length > 1) {\n                a[1].split(\"#\")[0].split(\"&\").forEach(key => {\n                    let b = key.split(\"=\");\n                    c[b[0]] = b[1];\n                });\n            }\n            this.code = c.code;\n        } catch (e) {\n        }\n    }\n\n    getLoginInfo() {\n        return {\n            client_id: this.client_id,\n            client_secret: this.client_secret,\n            scope: this.scope\n        }\n    }\n\n    isLogin() {\n        return this.token !== undefined;\n    }\n}\n\nclass Comment {\n    constructor(context) {\n        this.context = context;\n        this._session = new Session(context);\n    }\n\n    get session() {\n        return this._session;\n    }\n\n    get(url, data) {\n        return this.context.request.fetch({\n            url:`https://api.github.com${url}`,\n            method:\"get\",\n            headers: {\n                Accept: \"application/vnd.github.squirrel-girl-preview, application/vnd.github.html+json\",\n                Authorization: `token ${this.session.token}`,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n    post(url, data) {\n        return this.context.request.fetch({\n            url:`https://api.github.com${url}`,\n            method:\"post\",\n            body: JSON.stringify(data),\n            headers: {\n                Accept: \"application/vnd.github.squirrel-girl-preview, application/vnd.github.html+json\",\n                Authorization: `token ${this.session.token}`,\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    getLoginURL(redirect_uri) {\n        let ops = Object.assign({}, this.session.getLoginInfo(), {redirect_uri: redirect_uri || \"http://adajs.io/dist/\"});\n        let paras = Reflect.ownKeys(ops).map(key => {\n            return `${key}=${ops[key]}`;\n        }).join(\"&\");\n        return `https://github.com/login/oauth/authorize?${paras}`;\n    }\n\n    login() {\n        if (!this.session.token) {\n            return this.context.request.fetch({\n                url:`https://cors-anywhere.herokuapp.com/https://github.com/login/oauth/access_token`,\n                method:\"post\",\n                data: Object.assign({}, this.session.getLoginInfo(), {code: this.session.code}),\n                dataType: \"text\"\n            }).then((info) => {\n                if (info.split) {\n                    let c = {};\n                    info.split(\"&\").forEach(a => {\n                        let b = a.split(\"=\");\n                        c[b[0]] = b[1];\n                    });\n                    this.session.token = c.access_token;\n                    try {\n                        this.context.window.localStorage.setItem(\"gitoken\", this.session.token);\n                    } catch (e) {\n                    }\n                    return this.get(`/user`).then((info) => {\n                        try {\n                            this.context.window.localStorage.setItem(\"gituser\", info);\n                            this.session.userinfo = info;\n                        } catch (e) {\n                        }\n                    });\n                }\n            });\n        } else {\n            return Promise.resolve(this.session.token);\n        }\n    }\n\n    getIssueCommentsById(id) {\n        return this.context.request.get(`https://api.github.com/repos/${this.session.resp}/issues/${id}/comments?client_id=4b5042acc1e0f611dcbb&client_secret=4e8d2f4341b5a5e29e7b4b4b04d8b2ab03e837b8&t=${new Date().getTime()}`);\n    }\n\n    getMarkdownContent(content) {\n        return this.context.request.fetch({\n            url:`https://api.github.com/markdown?client_id=4b5042acc1e0f611dcbb&client_secret=4e8d2f4341b5a5e29e7b4b4b04d8b2ab03e837b8`,\n            method:\"post\",\n            body: JSON.stringify({\n                \"text\": content || \"\",\n                \"mode\": \"gfm\",\n                \"context\": \"github/gollum\"\n            }),\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        });\n    }\n\n    comment(id, data) {\n        return this.post(`/repos/${this.session.resp}/issues/${id}/comments`, {body: data});\n    }\n}\n\nexport default Comment;"]}